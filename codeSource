#include "console.h"

Console::Console()
{

}

Console::~Console()
{

}



void Console::gotoxy(int x, int y) {
	COORD Pos = { x * 2,y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}

void Console::initKey() {

	
}


#pragma once
#include <Windows.h>

class Console {

public:
	Console();
	~Console();

	void initKey();
	void gotoxy(int x, int y); 

};
#include"main.h"


int main() {
	Tetris Tetris1;






	srand(time(0));

	int i=1;
	for (;;) {
		int r = rand() % 7;
		
		for (int t = 0; t < 4; t++) {
			for (int k = 0; k < 4; k++) {
				Tetris1.TetrisMap(15, 25);
				Tetris1._console.gotoxy(BlockShape[r][t][k].x+5, BlockShape[r][t][k].y+i);
				printf("��");
			}
			i++;
			if (i == 21) {
				i = 1;
			}
			Sleep(50);
			system("cls");
		}
	}	

	system("pause");
	return 0;
}




#include<stdio.h>
#include<stdlib.h>
#include<windows.h>
#include<conio.h>
#include<time.h>

#include "TetrisBlock.h"
#include "Tetris.h"
#include "console.h"



enum TETRIS { O = 0, I, J, L, S, Z, T };








#include "Tetris.h"


Tetris::Tetris()
{

}
Tetris::~Tetris()
{

}


void Tetris::TetrisMap(int x, int y) {
	for (int i = 1; i< y; i++) {
		for (int k = 1; k < x; k++) {
			_console.gotoxy(k, i);
			if (i == 1 || i == y-1) {
				printf("��");
			}
			else {
				if (k == 1 || k == x-1) {
					printf("��");
				}
			}
		}
	}
}

void Tetris::TetrisShape(int z, int x, int y) {


}

#pragma once
#include <stdio.h>
#include "console.h"

class Tetris {
public:
	Tetris();
	~Tetris();

public:
	void TetrisMap(int x, int y);
	void TetrisShape(int z, int x, int y);

public:
	Console _console;


};



#pragma once

struct Block {
	int x;
	int y;
};

Block BlockShape[7][4][4] = { { { 1,1,2,1,1,2,2,2 },{ 1,1,2,1,1,2,2,2 },{ 1,1,2,1,1,2,2,2 },{ 1,1,2,1,1,2,2,2 } },	/* O ����*/
							{ { 1,1,2,1,3,1,4,1 },{ 1,1,1,2,1,3,1,4 },{ 1,1,2,1,3,1,4,1 },{ 1,1,1,2,1,3,1,4 } },	/* I ����*/
							{ { 1,2,2,2,3,2,3,1 },{ 1,1,1,2,1,3,2,3 },{ 1,1,1,2,2,1,3,1 },{ 1,1,2,1,2,2,2,3 } },	/* J ����*/
							{ { 1,1,1,2,2,2,3,2 },{ 1,1,2,1,1,2,1,3 },{ 1,1,2,1,3,1,3,2 },{ 2,1,2,2,2,3,1,3 } },	/* L ����*/
							{ { 1,2,2,2,2,1,3,1 },{ 1,1,1,2,2,2,2,3 },{ 1,2,2,2,2,1,3,1 },{ 1,1,1,2,2,2,2,3 } },	/* S ����*/
							{ { 1,1,2,1,2,2,3,2 },{ 1,3,1,2,2,2,2,1 },{ 1,1,2,1,2,2,3,2 },{ 1,3,1,2,2,2,2,1 } },	/* Z ����*/
							{ { 1,2,2,2,2,1,3,2 },{ 1,1,1,2,1,3,2,2 },{ 1,1,2,1,2,2,3,1 },{ 2,1,2,2,2,3,1,2 } }     /* T ����*/
};
